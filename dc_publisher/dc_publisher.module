<?php
/**
 * @file
 * Main file of the module Drupal connect publisher.
 */

/**
 * Implements hook_menu().
 */
function dc_publisher_menu() {
  $items = array();

  $items['admin/apps/%dc_apps/documentation'] = array(
    'title' => 'Documentation',
    'description' => 'View documentation of an app',
    'access arguments' => array('view documentation'),
    'page callback' => 'dc_publisher_documentation',
    'page arguments' => array(2),
  );

  $items['publisher'] = array(
    'title' => 'Publisher',
    'description' => 'Supplying JSON information for an app',
    'access callback' => 'dc_publisher_oatuh_allowed',
    'page callback' => 'dc_publisher_supply_information',
  );

  $items['apps/%dc_apps/user_approve_app'] = array(
    'title' => 'Approve app',
    'description' => 'Allow to user approve app',
    'access callback' => TRUE,
    'page callback' => 'dc_apps_user_approve_app',
    'page arguments' => array(1),
  );

  return $items;
}

/**
 * Return the basic address of the the site oauth publisher page.
 */
function dc_publisher_base_url() {
  global $base_url;

  return $base_url . '?q=publisher';
}

/**
 * When oatuh want to pull data he need to pass the oauth signature test.
 */
function dc_publisher_oatuh_allowed() {
  global $base_url;

  if (!isset($_GET['key']) || !isset($_GET['secret'])) {
    return;
  }

  $reader = new DrupalConnect($_GET['key'], $_GET['secret']);
  $reader
    ->SetUrl(dc_publisher_base_url())
    ->SetOauthRequest();

  return $reader->VerifySignature($_GET['signature']);
}

/**
 * Page callback - supply the information the oauth service selected.
 */
function dc_publisher_supply_information() {
  $app = dc_apps_load_by_keys($_GET['key'], $_GET['secret']);

  if (!$app) {
    // No app found - return nothing.
    drupal_json_output(t("App with the key and secret wasn't found"));
  }

  if (!in_array($_GET['data'], array_keys($app->need))) {
    drupal_json_output(t("The @data information you selected cannot be supplied due to app settings.", array('@data' => $_GET['data'])));
    exit();
  }

  // Start the query.
  $query = new entityFieldQuery();
  $query->entityCondition('entity_type', $_GET['data']);

  // Find the field to work upon and the operator to apply.

  // Execute.
  $result = $query->execute();

  if (empty($result[$_GET['data']])) {
    drupal_json_output(t('No data were found according to you search curatorial.'));
  }

  // Supply the information.
  drupal_json_output(entity_load($_GET['data'], array_keys($result[$_GET['data']])));
}

/**
 * Implements hook_permission().
 */
function dc_publisher_permission() {
  return array(
    'view documentation' => array(
      'title' => t('View documentation'),
      'description' => t('Allow to the user watch the documentation of an app.'),
    ),
  );
}

/**
 * Implements hook_dc_apps_generate_links_action_alter().
 */
function dc_publisher_dc_apps_generate_links_action_alter(&$actions, DrupalConnectApps $app) {
  $actions['documentation'] = array(
    'title' => t('Documentation'),
    'href' => 'admin/apps/' . $app->id . '/documentation',
  );
}

/**
 * Implements hook_dc_apps_app_options_alter().
 */
function dc_publisher_dc_apps_app_options_alter(&$items, DrupalConnectApps $app) {
  $items[] = $app->generateLink('documentation');
}

/**
 * Display documentation for an app.
 */
function dc_publisher_documentation(DrupalConnectapps $app) {
  $reader = new DrupalConnect($app->app_key, $app->app_secret);
  $reader
    ->SetUrl(dc_publisher_base_url())
    ->SetOauthRequest()
    ->SetSignatureParameter();

  $urls = array();

  foreach (array_keys($app->need) as $entity) {
    $entity_reader = clone $reader;
    $entity_reader->request->set_parameter('data', $entity);

    $urls[] = l($entity, $entity_reader->getUrl());
    $entity_reader->request->unset_parameter('data');
  }

  return theme('item_list', array('items' => $urls));
}
