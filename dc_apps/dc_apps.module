<?php
/**
 * @file
 * Main module file for the Drupal connect apps module.
 */

/**
 * Implements hook_entity_info().
 */
function dc_apps_entity_info() {
  return array(
    'dc_app' => array(
      'label' => t('Drupal connect apps'),
      'entity class' => 'DrupalConnectApps',
      'controller class' => 'EntityAPIController',
      'base table' => 'dc_apps',
      'entity keys' => array(
        'id' => 'id',
        'label' => 'title',
      ),
    ),
  );
}

/**
 * Create s Drupal connect app entity.
 *
 * @param $data
 *  Initialize data of the Drupal connect app.
 *
 * @return DrupalConnectApps
 *  Initialized object a Drupal connect app.
 */
function dc_apps_create($data = array()) {
  global $user;

  $data += array(
    'uid' => $user->uid,
    'time' => REQUEST_TIME,
    'status' => !variable_get('apps_need_approve'),
  );

  return entity_create('dc_app', $data);
}

/**
 * Load multiple Drupal connect app entity.
 *
 * @param $ids
 *  Array if Drupal connect apps IDs.
 *
 * @return DrupalConnectApps[]
 *  Array of Drupal connect apps objects.
 */
function dc_apps_load_multiple($ids) {
  return entity_load('dc_app', $ids);
}

/**
 * Load a single Drupal connect app entity.
 *
 * @param $id
 *  Id a Drupal connect app entity.
 *
 * @return DrupalConnectApps
 *  Drupal connect apps object.
 */
function dc_apps_load($id) {
 return entity_load_single('dc_app', $id);
}

/**
 * Delete multiple Drupal connect app entity.
 *
 * @param $ids
 *  List of Drupal connect app IDs to delete.
 */
function dc_apps_delete_multiple($ids) {
  entity_delete_multiple('dc_app', $ids);
}

/**
 * Implements hook_menu().
 */
function dc_apps_menu() {
  $items = array();

  $items['admin/apps'] = array(
    'title' => 'Apps',
    'description' => 'Create/edit/delete apps',
    'page callback' => array('dc_apps_main_app_page'),
    'access callback' => 'dc_apps_access_main_app_page',
    'file' => 'dc_apps.misc.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
  );

  $items['admin/apps/add'] = array(
    'title' => 'Create app',
    'description' => 'Add an app',
    'type' => MENU_LOCAL_ACTION,
    'access arguments' => array('create app'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_apps_app_form'),
    'file' => 'dc_apps.crud.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
  );

  $items['admin/apps/%dc_apps/edit'] = array(
    'title' => 'Edit',
    'description' => 'Edit the app settings',
    'access callback' => 'dc_apps_access',
    'access arguments' => array('edit', 2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_apps_app_form', 2),
    'file' => 'dc_apps.crud.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
    'type' => MENU_LOCAL_TASK,
    'weight' => 0,
  );

  $items['admin/apps/%dc_apps/delete'] = array(
    'title' => 'Delete',
    'description' => 'Delete an app.',
    'access callback' => 'dc_apps_access',
    'access arguments' => array('delete', 2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_apps_app_delete', 2),
    'file' => 'dc_apps.crud.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
    'type' => MENU_LOCAL_TASK,
    'weight' => 10,
  );

  if (module_exists('devel')) {
    $items['admin/apps/%dc_apps/devel'] = array(
      'title' => 'Devel',
      'page callback' => 'devel_load_object',
      'page arguments' => array('dc_apps', 2),
      'access arguments' => array('access devel information'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'file' => 'devel.pages.inc',
      'file path' => drupal_get_path('module', 'devel'),
      'weight' => 20,
    );
  }

  $items['admin/apps/%dc_apps/approve'] = array(
    'title' => 'Approve app',
    'description' => 'Approve an app.',
    'access callback' => 'dc_apps_approve_app',
    'access arguments' => array(2),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_apps_app_approve', 2),
    'file' => 'dc_apps.crud.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
  );

  $items['admin/config/services/apps-settings'] = array(
    'title' => 'Drupal connect apps',
    'description' => 'Manage Drupal connect apps',
    'access arguments' => array('manage settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_apps_settings'),
    'file' => 'dc_apps.misc.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
  );

  return $items;
}

/**
 * Implements hook_admin_paths().
 */
function dc_apps_admin_paths() {
  return array(
    'admin/apps' => TRUE,
    'admin/apps/add' => TRUE,
    'admin/apps/apps/*' => TRUE,
    'admin/apps/apps/*/edit' => TRUE,
    'admin/apps/apps/*/devel' => TRUE,
    'admin/apps/apps/*/delete' => TRUE,
  );
}

/**
 * Access callback - determine if the user has access to the main app page.
 */
function dc_apps_access_main_app_page($account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  $permissions = array(
    'manage apps', 'edit app', 'edit own app', 'delete app', 'delete own app',
  );

  foreach ($permissions as $permission) {
    if (!user_access($permission, $account)) {
      return FALSE;
    }
  }

  return TRUE;
}

/**
 * Access callback for action on app.
 *
 * @param $access
 *  The access name.
 * @param DrupalConnectApps $app
 *  The app object
 * @param $account
 *  The user ID.
 *
 * @return bool
 *  Return true or false if the user has access for this action.
 */
function dc_apps_access($access, DrupalConnectApps $app, $account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  // Check if the user can manage apps. The manage apps permission are bypass
  // any permission.
  if (user_access('manage apps')) {
    return TRUE;
  }

  $edit_permission = $access;
  if ($account->uid == $app->uid) {
    $edit_permission .= ' own';
  }
  $edit_permission .= ' app';

  // Collect access information from other modules. See first if other modules
  // allowed this action. Only TRUE will accepted.
  $invoked_access = module_invoke_all('dc_apps_access', $access, $app, $account);
  if (in_array(TRUE, $invoked_access, TRUE)) {
    return TRUE;
  }

  return user_access($edit_permission, $account);
}

/**
 * Access callback for approving an app. This will be able in two cases:
 *  1. The app is disabled.
 *  2. The user can approve apps.
 *
 * @param DrupalConnectApps $app
 *  The app object.
 * @param $account
 *  The account of the user.
 *
 * @return bool
 *  Return TRUE/FALSE if the app can be enabled.
 */
function dc_apps_approve_app(DrupalConnectApps $app, $account = NULL) {
  if (!$account) {
    global $user;
    $account = user_load($user->uid);
  }

  // The app is enabled. Get out!
  if ($app->status) {
    return FALSE;
  }

  return user_access('can approve app', $account) || user_access('manage apps', $account);
}

/**
 * Implements hook_permission().
 */
function dc_apps_permission() {
  return array(
    'create app' => array(
      'title' => t('Create an app'),
      'description' => t('Allow the user a permission to create an app.'),
    ),
    'edit own app' => array(
      'title' => t('Edit own app'),
      'description' => t('Allow to the user edit his own app.'),
    ),
    'edit app' => array(
      'title' => t('Edit app'),
      'description' => t('Allow user to edit apps which he not own them.'),
    ),
    'delete own app' => array(
      'title' => t('Delete own app'),
      'description' => t('Allow to the user delete his app.'),
    ),
    'delete app' => array(
      'title' => t('Delete other app'),
      'description' => t('Allow to the user delete apps which he not own them.'),
    ),
    'can approve app' => array(
      'title' => t('Can approve app'),
      'description' => t('When apps need to be approved, the user can approve apps.'),
    ),
    'manage apps' => array(
      'title' => t('Manage app'),
      'description' => t('Grant to the user manage apps. Give this to trusty users.'),
    ),
    'manage settings' => array(
      'title' => t('Manage settings'),
      'description' => t('Allow to user manage the settings of Drupal connect apps. Give this to trusty users.'),
    ),
  );
}

/**
 * Load app entity by key and secret.
 *
 * @param $key
 *  The key of the app.
 * @param $secret
 *  The secret key of the app.
 *
 * @return DrupalConnectApps
 */
function dc_apps_load_by_keys($key, $secret) {
  $query = new entityFieldQuery();

  $result = $query
    ->entityCondition('entity_type', 'dc_app')
    ->propertyCondition('app_key', $key)
    ->propertyCondition('app_secret', $secret)
    ->execute();

  if (empty($result['dc_app'])) {
    return;
  }

  return dc_apps_load(reset($result['dc_app'])->id);
}

/**
 * Build a list of properties and fields for an entity.
 *
 * @param $entity
 *  The entity name.
 *
 * @return Array
 *  List of fields.
 */
function dc_apps_build_fields($entity) {
  $schema_info = array();

  // Get the schema fields.
  $info = entity_get_info($entity);

  foreach ($info['schema_fields_sql']['base table'] as $property) {
    $schema_info[$property] = ucfirst(str_replace('_', ' ', $property));
  }

  // Get the fields names.
  $field_instances = field_info_instances($entity);

  foreach ($field_instances as $bundle => $fields) {
    foreach ($fields as $name => $field) {
      $content_type_info = node_type_get_type($bundle);

      $schema_info[$name] = $field['label'];
      $schema_info[$name] .= $content_type_info ? " (" . $content_type_info->name . ")" : '';
    }
  }

  return $schema_info;
}

/**
 * verify that the user approve the app.
 *
 * @param DrupalConnectApps $app
 *  The app object.
 * @param $account
 *  The account of the user.*  The account of the user.
 *
 * @return bool
 *  True or false if the user approved the app.
 */
function dc_apps_user_approved_app(DrupalConnectApps $app, $account = NULL) {

}
