<?php
/**
 * @file
 * Main module file for the Drupal connect apps module.
 */

/**
 * Implements hook_entity_info().
 */
function dc_apps_entity_info() {
  return array(
    'dc_app' => array(
      'label' => t('Drupal connect apps'),
      'entity class' => 'DrupalConnectApps',
      'controller class' => 'EntityAPIController',
      'base table' => 'dc_apps',
      'entity keys' => array(
        'id' => 'id',
      ),
    ),
  );
}

/**
 * Create s Drupal connect app entity.
 *
 * @param $data
 *  Initialize data of the Drupal connect app.
 *
 * @return DrupalConnectApps
 *  Initialized object a Drupal connect app.
 */
function dc_apps_create($data = array()) {
  global $user;
  $data += array(
    'uid' => $user->uid,
    'time' => REQUEST_TIME,
    'status' => 1,
  );

  return entity_create('dc_app', $data);
}

/**
 * Load multiple Drupal connect app entity.
 *
 * @param $ids
 *  Array if Drupal connect apps IDs.
 *
 * @return DrupalConnectApps[]
 *  Array of Drupal connect apps objects.
 */
function dc_apps_load_multiple($ids) {
  return entity_load('dc_app', $ids);
}

/**
 * Load a single Drupal connect app entity.
 *
 * @param $id
 *  Id a Drupal connect app entity.
 *
 * @return DrupalConnectApps
 *  Drupal connect apps object.
 */
function dc_apps_load($id) {
 return entity_load_single('dc_app', $id);
}

/**
 * Delete multiple Drupal connect app entity.
 *
 * @param $ids
 *  List of Drupal connect app IDs to delete.
 */
function dc_apps_delete_multiple($ids) {
  entity_delete_multiple('dc_app', $ids);
}

/**
 * Implements hook_menu().
 */
function dc_apps_menu() {
  $items = array();

  $items['admin/apps'] = array(
    'title' => 'Apps',
    'description' => 'Create/edit/delete apps',
    'page callback' => array('dc_apps_main_app_page'),
    'access callback' => 'dc_apps_access_main_app_page',
    'file' => 'dc_apps.misc.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
  );

  $items['admin/apps/add-app'] = array(
    'title' => 'Create app',
    'description' => 'Add an app',
    'type' => MENU_LOCAL_ACTION,
    'access arguments' => array('create app'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_apps_app_form'),
    'file' => 'dc_apps.crud.inc',
    'file path' => drupal_get_path('module', 'dc_apps') . '/pages/',
  );

  $items['admin/apps/settings'] = array();
  $items['admin/apps/add'] = array();
  $items['admin/apps/%dc_app'] = array();
  $items['admin/apps/%dc_app/edit'] = array();
  $items['admin/apps/%dc_app/delete'] = array();
  $items['admin/apps/%dc_app/devel'] = array();
  $items['admin/apps/%dc_app/stats'] = array();
  $items['admin/apps/%dc_app/documentation'] = array();

  return $items;
}

/**
 * Access callback - determine if the user has access to the main app page.
 *
 * TODO: Fix.
 */
function dc_apps_access_main_app_page($account = NULL) {
  return TRUE;
}

/**
 * Implements hook_permission().
 */
function dc_apps_permission() {
  return array(
    'create app' => array(
      'title' => t('Create an app'),
      'description' => t('Allow the user a permission to create an app.'),
    ),
    'edit app' => array(),
    'delete app' => array(),
    'can approve app' => array(),
    'manage apps' => array(),
    'manage settings' => array(),
  );
}


/**
 * Load app entity by key and secret.
 *
 * @param $key
 *  The key of the app.
 * @param $secret
 *  The secret key of the app.
 *
 * @return DrupalConnectApps
 */
function dc_apps_load_by_keys($key, $secret) {
}

/**
 * Build a list of properties and fields for an entity.
 *
 * @param $entity
 *  The entity name.
 *
 * @return Array
 *  List of fields.
 */
function dc_apps_build_fields($entity) {
  $schema_info = array();

  // Get the schema fields.
  $info = entity_get_info($entity);

  foreach ($info['schema_fields_sql']['base table'] as $property) {
    $schema_info[$property] = ucfirst(str_replace('_', ' ', $property));
  }

  // Get the fields names.
  $field_instances = field_info_instances($entity);

  foreach ($field_instances as $bundle => $fields) {
    foreach ($fields as $name => $field) {
      $content_type_info = node_type_get_type($bundle);

      $schema_info[$name] = $field['label'];
      $schema_info[$name] .= $content_type_info ? " (" . $content_type_info->name . ")" : '';
    }
  }

  return $schema_info;
}

