<?php

/**
 * @file
 * Module file for the Drupal connect reader.
 */

/**
 * Implements hook_menu().
 */
function dc_reader_menu() {
  $items = array();

  $items['admin/config/services/reader-settings'] = array(
    'title' => 'Drupal reader connect',
    'description' => 'Manage Drupal reader connect settings',
    'access arguments' => array('manage dc reader settings'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_reader_settings'),
  );

  $items['processor'] = array(
    'title' => 'Process',
    'description' => 'process the information',
    'access callback' => TRUE,
    'page callback' => 'dc_reader_process',
    'type' => MENU_CALLBACK,
  );

  $items['reader/register_user'] = array(
    'title' => 'Register a new user',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('dc_reader_register_form'),
    'access callback' => 'dc_reader_register_access',
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function dc_reader_permission() {
  return array(
    'manage dc reader settings' => array(
      'title' => t('Manage Drupal reader settings'),
      'description' => t('Grant the user permission to manage the Drupal reader permission.')
    ),
  );
}

/**
 * Implements hook_theme().
 */
function dc_reader_theme() {
  return array(
    'dc_reader_login_button' => array(
      'variables' => array(
        'mode' => NULL,
      ),
    ),
  );
}

/**
 * Manage settings.
 */
function dc_reader_settings($form, $form_state) {
  $form['dc_reader_site_address'] = array(
    '#type' => 'textfield',
    '#title' => t('Site address'),
    '#description' => t('Enter the site address of a drupal site for remote login.'),
    '#default_value' => variable_get('dc_reader_site_address', ''),
  );

  $form['dc_reader_public_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Public key'),
    '#description' => t('Please fill on the public key.'),
    '#default_value' => variable_get('dc_reader_public_key', ''),
  );

  $form['dc_reader_secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret key'),
    '#description' => t('Please fill on the secret key.'),
    '#default_value' => variable_get('dc_reader_secret_key', ''),
  );

  $form['dc_reader_button_style'] = array(
    '#type' => 'radios',
    '#title' => t('Connect button style'),
    '#description' => t('Select the way you would like to display the connect button.'),
    '#options' => array(
      '--none--' => t('None - you supply the button yourself.'),
      'link' => t('Link - display a link before the submit button.'),
    ),
    '#default_value' => variable_get('dc_reader_button_style', 'link'),
  );

  $form['dc_reader_link_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Login link title'),
    '#description' => t('You chose to use link for the login button. Please fill in the title.'),
    '#default_value' => variable_get('dc_reader_link_title'),
    '#states' => array(
      'visible' => array(
        ':input[name="dc_reader_button_style"]' => array('value' => 'link'),
      ),
    ),
  );

  return system_settings_form($form);
}

/**
 * Process the information which came form other drupal sites.
 *
 * The connect with button work by the next steps:
 *  1.  Send the user to the drupal site which we "Connect with"
 *  2.  The site verify the key, secret and signature. If the validation passed
 *      A unique session in the site created.
 *  3.  The user return back to this site with the session.
 *  4.  With that session we call the a menu item which return the user info
 *  5.  Checking if the user exists in the site, if not create it and bind him
 *      to the app. If the user already binned just logging in. If the username
 *      already taken then the user need to select a new username.
 *
 * Notice: Once the session is created, it could be used to 30 seconds only.
 * After that the session will be delete, trying to pull user data with that
 * session will be invalid.
 */
function dc_reader_process() {
  if (empty($_GET['session'])) {
    return;
  }

  // Request from the publisher the user information with the session key.
  $reader = new DrupalConnect($_GET['key'], $_GET['secret']);

  $reader
    ->SetUrl(variable_get('dc_reader_site_address') . '?q=publisher')
    ->SetOauthRequest()
    ->SetSignatureParameter();

  $reader->request->set_parameter('session', $_GET['session']);
  $result = $reader->getResult(TRUE);

  if ($account = user_load_by_mail($result['mail'])) {
    // The email from the publisher site is exists here. A user with that mail
    // already exists. Log in with that user.
    global $user;
    $user = $account;
    drupal_session_regenerate();
    drupal_goto('<front>');

    // Set the message.
    drupal_set_message(t('Hello %username, you logged successfully via the connect with option.'));
  }
  else {
    $_SESSION['reader_result'] = $result;
    drupal_goto('reader/register_user');
  }
}

/**
 * Access callback - check if we need to register that logged via the connect
 * with button.
 */
function dc_reader_register_access() {
  return isset($_SESSION['reader_result']);
}

/**
 * Register a new user form.
 *
 * Just the password and the
 */
function dc_reader_register_form($form, $form_state) {
  $form['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Username'),
    '#required' => TRUE,
    '#description' => t('Please enter a user name.'),
    '#default_value' => $_SESSION['reader_result']['name'],
  );

  $form['email'] = array(
    '#type' => 'textfield',
    '#title' => t('E-mail'),
    '#value' => $_SESSION['reader_result']['mail'],
    '#disabled' => TRUE,
  );

  $form['actions'] = array(
    'submit' => array(
      '#type' => 'submit',
      '#value' => t('Register'),
    ),
  );

  return $form;
}

/**
 * Validate the username is not taken.
 */
function dc_reader_register_form_validate($form, $form_state) {
  if (user_load_by_name($form_state['values']['name'])) {
    form_set_error('name', t('The user name is already taken.'));
  }
  elseif (user_load_by_mail($form_state['values']['email'])) {
    form_set_error('email', t('The email is already taken.'));
  }
}

/**
 * register the user, bind him with the original mail and redirect him to reset
 * the password.
 */
function dc_reader_register_form_submit($form, &$form_state) {
  $pass = user_password(8);

  //set up the user fields
  $fields = array(
    'name' => $form_state['values']['name'],
    'mail' => $form_state['values']['email'],
    'pass' => $pass,
    'status' => 1,
    'roles' => array(
      DRUPAL_AUTHENTICATED_RID => 'authenticated user',
    ),
  );

  //the first parameter is left blank so a new user is created
  $account = user_save('', $fields);

  // Display message and redirect the user to reset the password.
  $params = array(
    '%name' => $form_state['values']['name'],
  );
  drupal_set_message(t('Hello %name, you create your account successfully.', $params));
  drupal_goto(user_pass_reset_url($account));
}

/**
 * Theme callback - generate an oAuth connect link.
 *
 * @param $variables
 *  The way you would like to present the link. Default value is in the variable
 *  dc_reader_button_style.
 *
 * @return String
 *  HTML markup of the login link.
 */
function theme_dc_reader_login_button($variables = NULL) {
  if (!$variables['mode']) {
    $variables['mode'] = variable_get('dc_reader_button_style', 'link');
  }

  $mode = $variables['mode'];

  if ($mode == 'link') {
    return l(variable_get('dc_reader_link_title'), dc_reader_generate_link());
  }
}

/**
 * Generate the link for the session initialize request.
 */
function dc_reader_generate_link() {
  $reader = new DrupalConnect(variable_get('dc_reader_public_key'), variable_get('dc_reader_secret_key'));

  $reader
    ->SetUrl(variable_get('dc_reader_site_address') . '?q=dc-connect')
    ->SetOauthRequest()
    ->SetSignatureParameter();

  return $reader->getUrl();
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function dc_reader_form_user_login_alter(&$form, &$form_state) {
  $form['login'] = array(
    '#type' => 'markup',
    '#markup' => theme('dc_reader_login_button'),
  );
}
